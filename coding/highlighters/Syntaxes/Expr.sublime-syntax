%YAML 1.2
---

name: Expr
file_extensions: [expr]
scope: source.expr

variables:
  id:  '(?<![a-z])[a-z]+(?![a-z])'
  int: '(?<![0-9])[0-9]+(?![0-9])'
  num: '(\-)?{{int}}(.{{int}})?((E|e{{int}}))?'

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  # prototype:
  # - include: comments

  main:
  # The main context is the initial starting point of our syntax.
  # Include other contexts from here (or specify them directly).
   - include: expecting_num
   - include: strings

  expecting_num:
    - meta_scope: expecting_num
    - match: '{{int}}'
      # scope: constant.numeric.expr
      set: expecting_op
    - match: '{{id}}'
      # scope: storage.modifier 
    # - match: ''
    #   push: expecting_op

  expecting_op:
    - meta_scope: expecting_op
    - match: '\+|\-|\*|\/'
      # scope: keyword.operator.arithmetic.expr
      set: expecting_num


  # operators:
  #   - match: '\+|-|\*|/'
  #     scope: keyword.operator.arithmetic.expr  

  # brackets:
  #   - match: '\(|\)'
  #     scope: meta.brackets.expr  

  # numbers:
  #   - match: '\b{{num}}\b'
  #     scope: constant.numeric.expr

  strings:
  # Strings begin and end with quotes, and use backslashes as an escape
  # character.
  - match: '\"'
    scope: punctuation.definition.string.begin.expr
    push: inside_string

  inside_string:
  - meta_include_prototype: false
  - meta_scope: string.quoted.double.expr
  - match: '\.'
    scope: constant.character.escape.expr
  - match: '\<'
    set: interp_string
  - match: '"'
    scope: punctuation.definition.string.end.expr
    pop: true

  interp_string:
  - meta_include_prototype: false
  - match: '\>'
    set: inside_string 

  # comments:
  # # Comments begin with a '//' and finish at the end of the line.
  # - match: '//'
  #   scope: punctuation.definition.comment.expr
  #   push:
  #   # This is an anonymous context push for brevity.
  #   - meta_scope: comment.line.double-slash.expr
  #   - match: $\n?
  #     pop: true
